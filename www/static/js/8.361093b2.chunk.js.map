{"version":3,"sources":["config.tsx","redux/modalShowSlice.tsx","utils/getRPC.tsx","utils/connectors.tsx","redux/triedEager.tsx","redux/store.tsx","Provider.tsx"],"names":["config","chainId","process","rpc_url1","rpc_url2","backend_url","modalShowSlice","createSlice","name","initialState","show","reducers","changeState","state","actions","Error","RPC_NODES","getRPCNodeUrl","url","sample","undefined","chainID","getChainID","parseInt","RPC_URL","CHAIN_ID","NaN","injected","InjectedConnector","supportedChainIds","handleChainChanged","newChainID","localStorage","removeItem","emitDeactivate","emitUpdate","provider","window","BinanceChain","location","reload","walletconnect","WalletConnectConnector","rpc","bridge","qrcode","pollingInterval","getLibrary","Web3","triedEagerSlice","tried","setState","action","payload","store","configureStore","reducer","modalShow","modalShowReducer","triedEager","triedEagerReducer","Web3Provider","children","reduxStore"],"mappings":"kHAqBeA,IARA,CACXC,QAASC,IACTC,SAAUD,gEACVE,SAAUF,gEAEVG,YAAaH,qC,iCClBjB,+CAEaI,EAAiBC,YAAY,CACtCC,KAAM,YACNC,aAAc,CACVC,MAAM,GAEVC,SAAU,CACNC,YAAa,SAACC,GACVA,EAAMH,MAAOG,EAAMH,SAMhBE,EAAgBN,EAAeQ,QAA/BF,YAEAN,MAAf,S,iCCjBA,mGAIA,IAAKN,IAAOG,WAAaH,IAAOI,SAC5B,MAAMW,MAAM,6BAIT,IAAMC,EAAY,CAAChB,IAAOG,SAAUH,IAAOI,UAE5Ca,EAAgB,WAElB,IAAMC,EAAMC,IAAOH,GAGnB,QAAYI,IAARF,EAKJ,OAAOA,GAIX,QAAuBE,IAAnBpB,IAAOC,QACP,MAAM,IAAIc,MAAM,6BAGpB,IAAMM,EAAUrB,IAAOC,QAEjBqB,EAAa,WACf,OAAOC,SAASF,EAAS,M,iCChC7B,uJAUMG,EAA8BP,cAC9BQ,EAAmBH,cAGzB,QAAgBF,IAAZI,EACA,MAAM,IAAIT,MAAM,oCAIpB,GAAiBW,MAAbD,EACA,MAAM,IAAIV,MAAM,oDAIb,IAAMY,EAAW,IAAIC,IAAkB,CAC1CC,kBAAmB,CAACJ,KAIxBE,EAASG,mBAAqB,SAACC,GAC3B,GAAIA,GAAcN,EAMd,OALAO,aAAaC,WAAW,uBAGxBN,EAASO,iBAMbP,EAASQ,WAAW,CAAElC,QAAS8B,EAAYK,SAAUC,OAAOC,eAE5DD,OAAOE,SAASC,UAIpB,IAEaC,EAAgB,IAAIC,IAAuB,CACpDC,IAAK,CAAE,EAAGnB,GACVoB,OAAQ,mCACRC,QAAQ,EACRC,gBANqB,OAUZC,EAAa,SAACX,GAEvB,OADgB,IAAIY,IAAKZ,K,iCCzD7B,+CAEaa,EAAkB1C,YAAY,CACvCC,KAAM,aACNC,aAAc,CACVyC,OAAO,GAEXvC,SAAU,CACNwC,SAAU,SAACtC,EAAOuC,GACdvC,EAAMqC,MAAQE,EAAOC,YAMlBF,EAAaF,EAAgBnC,QAA7BqC,SAEAF,MAAf,S,0bCNeK,EAPDC,YAAe,CACzBC,QAAS,CACLC,UAAWC,IACXC,WAAYC,O,OCULC,UAVM,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,SACpB,OACI,mCACI,cAAC,IAAD,CAAUR,MAAOS,EAAjB,SACI,cAAC,IAAD,CAAmBhB,WAAYA,IAA/B,SAA4Ce","file":"static/js/8.361093b2.chunk.js","sourcesContent":["// require('dotenv').config();\n\nif (process.env.NODE_ENV === 'production') {\n    if (!process.env.REACT_APP_ETH_MAINNET_RPC_URL_1 || !process.env.REACT_APP_ETH_MAINNET_RPC_URL_2) {\n        console.error('Missing RPC url!!');\n        process.exit(1);\n    }\n    if (!process.env.REACT_APP_BACKEND_URL) {\n        console.error('Missing backend url!!');\n        process.exit(1);\n    }\n}\n\nconst config = {\n    chainId: process.env.REACT_APP_ETH_MAINNET_CHAIN_ID || '1',\n    rpc_url1: process.env.REACT_APP_ETH_MAINNET_RPC_URL_1 || '',\n    rpc_url2: process.env.REACT_APP_ETH_MAINNET_RPC_URL_2 || '',\n\n    backend_url: process.env.REACT_APP_BACKEND_URL || '',\n};\n\nexport default config;\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const modalShowSlice = createSlice({\n    name: 'modalShow',\n    initialState: {\n        show: false,\n    },\n    reducers: {\n        changeState: (state) => {\n            state.show = state.show ? false : true;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { changeState } = modalShowSlice.actions;\n\nexport default modalShowSlice.reducer;\n","import sample from 'lodash/sample';\nimport config from '../config';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (!config.rpc_url1 || !config.rpc_url2) {\n    throw Error('ETH_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [config.rpc_url1, config.rpc_url2];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url === undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (config.chainId === undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = config.chainId;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","// Library Import\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport Web3 from 'web3';\n\n// Import TSX File\nimport { getRPCNodeUrl, getChainID } from './getRPC';\n\n// Define Constants\n// const POLLING_INTERVAL: number = 12000;\nconst RPC_URL: string | undefined = getRPCNodeUrl();\nconst CHAIN_ID: number = getChainID();\n\n// Type Check: RPC_URL should be valid string\nif (RPC_URL === undefined) {\n    throw new Error('URL Type Error: should be string');\n}\n\n// Type Check: CHAIN_ID should be valid Number\nif (CHAIN_ID === NaN) {\n    throw new Error('Invalid Numneric Error: should be a valid number');\n}\n\n// Connect to Inject Connector\nexport const injected = new InjectedConnector({\n    supportedChainIds: [CHAIN_ID],\n});\n\n//@ts-ignore\ninjected.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        localStorage.removeItem('_iris_fintech_');\n\n        //@ts-ignore\n        injected.emitDeactivate();\n\n        return;\n    }\n\n    //@ts-ignore\n    injected.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\n// Connect to Walletconnect Connector\nconst POLLING_INTERVAL = 12000;\n\nexport const walletconnect = new WalletConnectConnector({\n    rpc: { 1: RPC_URL },\n    bridge: 'https://bridge.walletconnect.org',\n    qrcode: true,\n    pollingInterval: POLLING_INTERVAL,\n});\n\n// getLibrary function for Web3Provider\nexport const getLibrary = (provider: any): Web3 => {\n    const library = new Web3(provider);\n    return library;\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport modalShowReducer from './modalShowSlice';\nimport triedEagerReducer from './triedEager';\n\nconst store = configureStore({\n    reducer: {\n        modalShow: modalShowReducer,\n        triedEager: triedEagerReducer,\n    },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React, { ReactNode } from 'react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Provider } from 'react-redux';\n\nimport { getLibrary } from './utils/connectors';\nimport reduxStore from './redux/store';\n\nconst Web3Provider = ({ children }: { children: ReactNode }) => {\n    return (\n        <>\n            <Provider store={reduxStore}>\n                <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n            </Provider>\n        </>\n    );\n};\n\nexport default Web3Provider;\n"],"sourceRoot":""}