{"version":3,"sources":["utils/connectors.tsx","redux/hook.tsx","utils/getRPC.tsx","hooks/walletTokenNetwork.tsx","hooks/useAuth.tsx","redux/triedEager.tsx","hooks/useEagerConnect.tsx","hooks/useInactiveListener.tsx","utils/baseConnection.tsx","App.tsx","utils/connectorNames.tsx"],"names":["RPC_URL","getRPCNodeUrl","CHAIN_ID","getChainID","undefined","Error","NaN","injected","InjectedConnector","supportedChainIds","handleChainChanged","newChainID","console","log","localStorage","removeItem","emitDeactivate","emitUpdate","chainId","provider","window","BinanceChain","location","reload","bscConnector","BscConnector","walletconnect","WalletConnectConnector","rpc","qrcode","connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","library","ethers","providers","Web3Provider","pollingInterval","signMessage","account","message","a","connecetedWallet","getItem","bnbSign","signature","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner","useAppDispatch","useDispatch","useAppSelector","useSelector","RPC_NODES","process","url","sample","parseInt","setupNetwork","ethereum","connectedWallet","request","method","params","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","error","useAuth","dispatch","useWeb3React","activate","deactivate","logout","useCallback","setState","walletConnectProvider","close","login","connectorID","connector","UnsupportedChainIdError","catch","NoEthereumProviderError","NoBscProviderError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","triedEagerSlice","createSlice","initialState","tried","reducers","state","action","payload","actions","useEagerConnect","useEffect","useInactiveListener","suppress","active","on","handleConnect","handleAccountsChanged","accounts","length","handleNetworkChanged","networkId","removeListener","BaseConnector","triedEager","WalletModal","lazy","WalletInfo","Account","Routes","Header","Footer","App"],"mappings":"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","file":"static/js/10.2578c379.chunk.js","sourcesContent":["// Library Import\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\n\nimport { ethers } from 'ethers';\n\n// Import TSX File\nimport { getRPCNodeUrl, getChainID } from './getRPC';\nimport { ConnectorNames } from './connectorNames';\n\n// Define Constants\n// const POLLING_INTERVAL: number = 12000;\nconst RPC_URL: string | undefined = getRPCNodeUrl();\nconst CHAIN_ID: number = getChainID();\n\n// Type Check: RPC_URL should be valid string\nif (RPC_URL === undefined) {\n    throw new Error('URL Type Error: should be string');\n}\n\n// Type Check: CHAIN_ID should be valid Number\nif (CHAIN_ID === NaN) {\n    throw new Error('Invalid Numneric Error: should be a valid number');\n}\n\n// Connect to Inject Connector\nexport const injected = new InjectedConnector({\n    supportedChainIds: [CHAIN_ID],\n});\n\n//@ts-ignore\ninjected.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        console.log('error');\n\n        localStorage.removeItem('Wallet');\n\n        //@ts-ignore\n        injected.emitDeactivate();\n\n        return;\n    }\n\n    //@ts-ignore\n    injected.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\nexport const bscConnector = new BscConnector({ supportedChainIds: [CHAIN_ID] });\n\n//@ts-ignore\nbscConnector.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        console.log('error');\n\n        localStorage.removeItem('Wallet');\n\n        //@ts-ignore\n        bscConnector.emitDeactivate();\n        return;\n    }\n\n    //@ts-ignore\n    bscConnector.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\nexport const walletconnect = new WalletConnectConnector({\n    rpc: { [CHAIN_ID]: RPC_URL },\n    chainId: CHAIN_ID,\n    qrcode: true,\n    // pollingInterval: POLLING_INTERVAL,\n});\n\n// Connectors dictionary for fast lookup\nexport const connectorsByName: { [connectorName: string]: any } = {\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.BSC]: bscConnector,\n};\n\n// getLibrary function for Web3Provider\nexport const getLibrary = (provider: any): ethers.providers.Web3Provider => {\n    const library = new ethers.providers.Web3Provider(provider);\n    library.pollingInterval = 12000;\n    return library;\n};\n\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n    const connecetedWallet = localStorage.getItem('Wallet');\n\n    // https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n    if (connecetedWallet === ConnectorNames.BSC && window.BinanceChain) {\n        const { signature } = await window.BinanceChain.bnbSign(account, message);\n        return signature;\n    }\n\n    // https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n    if (connecetedWallet === ConnectorNames.WalletConnect && provider.provider?.wc) {\n        const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\n        const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account]);\n        return signature;\n    }\n\n    return provider.getSigner(account).signMessage(message);\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import sample from 'lodash/sample';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (\n    !process.env.REACT_APP_BSC_RPC_URL_1 ||\n    !process.env.REACT_APP_BSC_RPC_URL_2 ||\n    !process.env.REACT_APP_BSC_RPC_URL_3\n) {\n    throw Error('BSC_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [\n    process.env.REACT_APP_BSC_RPC_URL_1,\n    process.env.REACT_APP_BSC_RPC_URL_2,\n    process.env.REACT_APP_BSC_RPC_URL_3,\n];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url === undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (process.env.REACT_APP_BSC_CHAIN_ID === undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = process.env.REACT_APP_BSC_CHAIN_ID;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","import { getChainID, getRPCNodeUrl } from '../utils/getRPC';\nimport { ConnectorNames } from '../utils/connectorNames';\n\nexport const setupNetwork = async () => {\n    const provider = window.ethereum;\n    const connectedWallet = localStorage.getItem('Wallet');\n\n    if (provider && connectedWallet === ConnectorNames.Injected) {\n        const chainId = getChainID();\n        try {\n            await provider.request({\n                method: 'wallet_addEthereumChain',\n                params: [\n                    {\n                        chainId: `0x${chainId.toString(16)}`,\n                        chainName: 'Binance Smart Chain Mainnet',\n                        nativeCurrency: {\n                            name: 'BNB',\n                            symbol: 'bnb',\n                            decimals: 18,\n                        },\n                        rpcUrls: [getRPCNodeUrl()],\n                        blockExplorerUrls: ['https://bscscan.com/'],\n                    },\n                ],\n            });\n            return true;\n        } catch (error) {\n            console.error('setup', error);\n            return false;\n        }\n    } else {\n        console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");\n        return false;\n    }\n};\n\nexport const registerToken = async (\n    tokenAddress: string,\n    tokenSymbol: string,\n    tokenDecimals: number,\n    tokenImage: string,\n) => {\n    const provider = window.ethereum;\n\n    const tokenAdded = await (provider as any).request({\n        method: 'wallet_watchAsset',\n        params: {\n            type: 'ERC20',\n            options: {\n                address: tokenAddress,\n                symbol: tokenSymbol,\n                decimals: tokenDecimals,\n                image: tokenImage,\n            },\n        },\n    });\n\n    return tokenAdded;\n};\n","import { useCallback } from 'react';\nimport { useWeb3React, UnsupportedChainIdError } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport {\n    NoEthereumProviderError,\n    UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector';\nimport {\n    UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n    WalletConnectConnector,\n} from '@web3-react/walletconnect-connector';\nimport { connectorsByName } from '../utils/connectors';\nimport { useAppDispatch } from '../redux/hook';\nimport { setState } from '../redux/triedEager';\nimport { setupNetwork } from './walletTokenNetwork';\n\nconst useAuth = () => {\n    const dispatch = useAppDispatch();\n    const { activate, deactivate } = useWeb3React();\n\n    const logout = useCallback(() => {\n        dispatch(setState(false));\n        deactivate();\n\n        const connecetedWallet = localStorage.getItem('Wallet') ?? 'WalletConnect';\n\n        if (window.localStorage.getItem('walletconnect')) {\n            connectorsByName[connecetedWallet].walletConnectProvider = undefined;\n            connectorsByName[connecetedWallet].close();\n            localStorage.removeItem('walletconnect');\n        }\n\n        localStorage.removeItem('Wallet');\n    }, [deactivate, dispatch]);\n\n    const login = useCallback(\n        (connectorID: string) => {\n            const connector = connectorsByName[connectorID];\n            if (connector) {\n                activate(connector, async (error: Error) => {\n                    if (error instanceof UnsupportedChainIdError) {\n                        const hasSetup = await setupNetwork();\n\n                        if (hasSetup) {\n                            activate(connector, undefined, true).catch(() => {\n                                dispatch(setState(true));\n                            });\n                        } else {\n                            console.log('logout');\n                            logout();\n                        }\n                    } else {\n                        // window.localStorage.removeItem('Wallet');\n                        if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n                            console.log('Provider Error', 'No provider was found');\n                        } else if (\n                            error instanceof UserRejectedRequestErrorInjected ||\n                            error instanceof UserRejectedRequestErrorWalletConnect\n                        ) {\n                            if (connector instanceof WalletConnectConnector) {\n                                const walletConnector = connector as WalletConnectConnector;\n                                walletConnector.walletConnectProvider = undefined;\n                            }\n\n                            console.log('Authorization Error', 'Please authorize to access your account');\n                        } else {\n                            console.log(error.name, error.message);\n                        }\n                        logout();\n                    }\n                }).catch(() => {\n                    dispatch(setState(true));\n                });\n            } else {\n                console.log(\"Can't find connector\", 'The connector config is wrong');\n            }\n        },\n        [activate, dispatch, logout],\n    );\n\n    return { login, logout };\n};\n\nexport default useAuth;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from '../redux/hook';\nimport { ConnectorNames } from '../utils/connectorNames';\nimport useAuth from './useAuth';\n\nconst useEagerConnect = () => {\n    const { activate } = useWeb3React();\n    const dispatch = useAppDispatch();\n    const { login } = useAuth();\n\n    useEffect(() => {\n        const connecetedWallet = localStorage.getItem('Wallet');\n\n        if (\n            connecetedWallet === ConnectorNames.Injected ||\n            connecetedWallet === ConnectorNames.BSC ||\n            connecetedWallet === ConnectorNames.WalletConnect\n        ) {\n            login(connecetedWallet);\n        }\n    }, [activate, dispatch, login]); // intentionally only running on mount (make sure it's only mounted once :))\n};\n\nexport default useEagerConnect;\n","import { useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport useAuth from './useAuth';\n\nconst useInactiveListener = (suppress: boolean = false) => {\n    const { connector, active, error } = useWeb3React();\n    const connectedWallet = localStorage.getItem('Wallet') ?? '';\n    const { login } = useAuth();\n\n    useEffect((): any => {\n        if (connector && connector.on && !active && !error && !suppress) {\n            const handleConnect = () => {\n                console.log(\"Handling 'connect' event\");\n                login(connectedWallet);\n            };\n            const handleChainChanged = (chainId: string | number) => {\n                console.log(\"Handling 'chainChanged' event with payload\", chainId);\n                window.location.reload();\n                login(connectedWallet);\n            };\n            const handleAccountsChanged = (accounts: string[]) => {\n                console.log(\"Handling 'accountsChanged' event with payload\", accounts);\n                if (accounts.length > 0) {\n                    login(connectedWallet);\n                }\n            };\n            const handleNetworkChanged = (networkId: string | number) => {\n                console.log(\"Handling 'networkChanged' event with payload\", networkId);\n                login(connectedWallet);\n            };\n\n            connector.on('connect', handleConnect);\n            connector.on('chainChanged', handleChainChanged);\n            connector.on('accountsChanged', handleAccountsChanged);\n            connector.on('networkChanged', handleNetworkChanged);\n\n            return () => {\n                if (connector.removeListener) {\n                    connector.removeListener('connect', handleConnect);\n                    connector.removeListener('chainChanged', handleChainChanged);\n                    connector.removeListener('accountsChanged', handleAccountsChanged);\n                    connector.removeListener('networkChanged', handleNetworkChanged);\n                }\n            };\n        }\n    }, [active, error, suppress, connector, login, connectedWallet]);\n};\n\nexport default useInactiveListener;\n","import useEagerConnect from '../hooks/useEagerConnect';\nimport useInactiveListener from '../hooks/useInactiveListener';\nimport { useAppSelector } from '../redux/hook';\n\nconst BaseConnector = () => {\n    const triedEager = useAppSelector((state) => state.triedEager.tried);\n\n    // handle logic to eagerly connect to the injected ethereum provider, if it exists and has granted access already\n    useEagerConnect();\n\n    // handle logic to connect in reaction to certain events on the injected ethereum provider, if it exists\n    useInactiveListener(!triedEager);\n};\n\nexport default BaseConnector;\n","import React, { lazy } from 'react';\n\nconst WalletModal = lazy(() => import('./components/WalletModal'));\nconst WalletInfo = lazy(() => import('./components/Wallet'));\nconst Account = lazy(() => import('./components/Account'));\nconst Routes = lazy(() => import('./route'));\nconst Header = lazy(() => import('./components/Header'));\nconst Footer = lazy(() => import('./components/Footer/Footer'));\n\nimport BaseConnector from './utils/baseConnection';\n\nconst App = () => {\n    BaseConnector();\n\n    return (\n        <div>\n            <Header />\n            <Routes />\n            <WalletInfo />\n            <WalletModal />\n            <Account />\n            <Footer />\n        </div>\n    );\n};\n\nexport default App;\n","export enum ConnectorNames {\n    Injected = 'Injected',\n    BSC = 'Binance Chain Wallet',\n    WalletConnect = 'WalletConnect',\n}\n"],"sourceRoot":""}