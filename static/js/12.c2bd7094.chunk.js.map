{"version":3,"sources":["utils/getRPC.tsx","utils/connectors.tsx","redux/triedEager.tsx","redux/store.tsx","Provider.tsx"],"names":["RPC_NODES","process","getRPCNodeUrl","url","sample","undefined","getChainID","parseInt","RPC_URL","CHAIN_ID","Error","NaN","injected","InjectedConnector","supportedChainIds","handleChainChanged","newChainID","console","log","localStorage","removeItem","emitDeactivate","emitUpdate","chainId","provider","window","BinanceChain","location","reload","getLibrary","library","ethers","providers","Web3Provider","pollingInterval","triedEagerSlice","createSlice","name","initialState","tried","reducers","setState","state","action","payload","actions","store","configureStore","reducer","triedEager","triedEagerReducer","children","reduxStore"],"mappings":"+IAAA,0FAQO,IAAMA,EAAY,CAACC,gEAA6CA,iEAEjEC,EAAgB,WAElB,IAAMC,EAAMC,IAAOJ,GAGnB,QAAYK,IAARF,EAKJ,OAAOA,GAQX,IAEMG,EAAa,WACf,OAAOC,SAHKN,IAGa,M,iJCtBvBO,EAA8BN,cAC9BO,EAAmBH,cAGzB,QAAgBD,IAAZG,EACA,MAAM,IAAIE,MAAM,oCAIpB,GAAiBC,MAAbF,EACA,MAAM,IAAIC,MAAM,oDAIb,IAAME,EAAW,IAAIC,IAAkB,CAC1CC,kBAAmB,CAACL,KAIxBG,EAASG,mBAAqB,SAACC,GAC3B,GAAIA,GAAcP,EAQd,OAPAQ,QAAQC,IAAI,SAEZC,aAAaC,WAAW,eAGxBR,EAASS,iBAMbT,EAASU,WAAW,CAAEC,QAASP,EAAYQ,SAAUC,OAAOC,eAE5DD,OAAOE,SAASC,UAIb,IAAMC,EAAa,SAACL,GACvB,IAAMM,EAAU,IAAIC,IAAOC,UAAUC,aAAaT,GAElD,OADAM,EAAQI,gBAAkB,KACnBJ,I,iCClDX,+CAEaK,EAAkBC,YAAY,CACvCC,KAAM,aACNC,aAAc,CACVC,OAAO,GAEXC,SAAU,CACNC,SAAU,SAACC,EAAOC,GACdD,EAAMH,MAAQI,EAAOC,YAMlBH,EAAaN,EAAgBU,QAA7BJ,SAEAN,MAAf,S,iHCReW,EANDC,YAAe,CACzBC,QAAS,CACLC,WAAYC,O,OCYLjB,UAVM,SAAC,GAA2C,IAAzCkB,EAAwC,EAAxCA,SACpB,OACI,mCACI,cAAC,IAAD,CAAUL,MAAOM,EAAjB,SACI,cAAC,IAAD,CAAmBvB,WAAYA,IAA/B,SAA4CsB","file":"static/js/12.c2bd7094.chunk.js","sourcesContent":["import sample from 'lodash/sample';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (!process.env.REACT_APP_ETH_MAINNET_RPC_URL_1 || !process.env.REACT_APP_ETH_MAINNET_RPC_URL_2) {\n    throw Error('ETH_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [process.env.REACT_APP_ETH_MAINNET_RPC_URL_1, process.env.REACT_APP_ETH_MAINNET_RPC_URL_2];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url === undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (process.env.REACT_APP_ETH_MAINNET_CHAIN_ID === undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = process.env.REACT_APP_ETH_MAINNET_CHAIN_ID;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","// Library Import\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { ethers } from 'ethers';\n\n// Import TSX File\nimport { getRPCNodeUrl, getChainID } from './getRPC';\n\n// Define Constants\n// const POLLING_INTERVAL: number = 12000;\nconst RPC_URL: string | undefined = getRPCNodeUrl();\nconst CHAIN_ID: number = getChainID();\n\n// Type Check: RPC_URL should be valid string\nif (RPC_URL === undefined) {\n    throw new Error('URL Type Error: should be string');\n}\n\n// Type Check: CHAIN_ID should be valid Number\nif (CHAIN_ID === NaN) {\n    throw new Error('Invalid Numneric Error: should be a valid number');\n}\n\n// Connect to Inject Connector\nexport const injected = new InjectedConnector({\n    supportedChainIds: [CHAIN_ID],\n});\n\n//@ts-ignore\ninjected.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        console.log('error');\n\n        localStorage.removeItem('Wallet');\n\n        //@ts-ignore\n        injected.emitDeactivate();\n\n        return;\n    }\n\n    //@ts-ignore\n    injected.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\n// getLibrary function for Web3Provider\nexport const getLibrary = (provider: any): ethers.providers.Web3Provider => {\n    const library = new ethers.providers.Web3Provider(provider);\n    library.pollingInterval = 12000;\n    return library;\n};\n\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n    return provider.getSigner(account).signMessage(message);\n};\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport triedEagerReducer from './triedEager';\n\nconst store = configureStore({\n    reducer: {\n        triedEager: triedEagerReducer,\n    },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React, { ReactNode } from 'react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Provider } from 'react-redux';\n\nimport { getLibrary } from './utils/connectors';\nimport reduxStore from './redux/store';\n\nconst Web3Provider = ({ children }: { children: ReactNode }) => {\n    return (\n        <>\n            <Provider store={reduxStore}>\n                <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n            </Provider>\n        </>\n    );\n};\n\nexport default Web3Provider;\n"],"sourceRoot":""}