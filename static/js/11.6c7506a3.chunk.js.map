{"version":3,"sources":["utils/connectors.tsx","redux/modalShowSlice.tsx","utils/getRPC.tsx","redux/triedEager.tsx","redux/modalExpand.tsx","redux/store.tsx","Provider.tsx","utils/connectorNames.tsx"],"names":["RPC_URL","getRPCNodeUrl","CHAIN_ID","getChainID","undefined","Error","NaN","injected","InjectedConnector","supportedChainIds","handleChainChanged","newChainID","console","log","localStorage","removeItem","emitDeactivate","emitUpdate","chainId","provider","window","BinanceChain","location","reload","bscConnector","BscConnector","walletconnect","WalletConnectConnector","rpc","qrcode","connectorsByName","ConnectorNames","Injected","WalletConnect","BSC","getLibrary","library","ethers","providers","Web3Provider","pollingInterval","signMessage","account","message","a","connecetedWallet","getItem","bnbSign","signature","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner","modalShowSlice","createSlice","name","initialState","show","reducers","changeState","state","actions","RPC_NODES","process","url","sample","parseInt","triedEagerSlice","tried","setState","action","payload","modalShowExpand","expand","setExpand","store","configureStore","reducer","modalShow","modalShowReducer","triedEager","triedEagerReducer","modalExpand","modalExpandReducer","children","reduxStore"],"mappings":"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","file":"static/js/11.6c7506a3.chunk.js","sourcesContent":["// Library Import\nimport { InjectedConnector } from '@web3-react/injected-connector';\nimport { BscConnector } from '@binance-chain/bsc-connector';\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector';\n\nimport { ethers } from 'ethers';\n\n// Import TSX File\nimport { getRPCNodeUrl, getChainID } from './getRPC';\nimport { ConnectorNames } from './connectorNames';\n\n// Define Constants\n// const POLLING_INTERVAL: number = 12000;\nconst RPC_URL: string | undefined = getRPCNodeUrl();\nconst CHAIN_ID: number = getChainID();\n\n// Type Check: RPC_URL should be valid string\nif (RPC_URL === undefined) {\n    throw new Error('URL Type Error: should be string');\n}\n\n// Type Check: CHAIN_ID should be valid Number\nif (CHAIN_ID === NaN) {\n    throw new Error('Invalid Numneric Error: should be a valid number');\n}\n\n// Connect to Inject Connector\nexport const injected = new InjectedConnector({\n    supportedChainIds: [CHAIN_ID],\n});\n\n//@ts-ignore\ninjected.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        console.log('error');\n\n        localStorage.removeItem('Wallet');\n\n        //@ts-ignore\n        injected.emitDeactivate();\n\n        return;\n    }\n\n    //@ts-ignore\n    injected.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\nexport const bscConnector = new BscConnector({ supportedChainIds: [CHAIN_ID] });\n\n//@ts-ignore\nbscConnector.handleChainChanged = (newChainID: string | number) => {\n    if (newChainID != CHAIN_ID) {\n        console.log('error');\n\n        localStorage.removeItem('Wallet');\n\n        //@ts-ignore\n        bscConnector.emitDeactivate();\n        return;\n    }\n\n    //@ts-ignore\n    bscConnector.emitUpdate({ chainId: newChainID, provider: window.BinanceChain });\n\n    window.location.reload();\n};\n\nexport const walletconnect = new WalletConnectConnector({\n    rpc: { [CHAIN_ID]: RPC_URL },\n    chainId: CHAIN_ID,\n    qrcode: true,\n    // pollingInterval: POLLING_INTERVAL,\n});\n\n// Connectors dictionary for fast lookup\nexport const connectorsByName: { [connectorName: string]: any } = {\n    [ConnectorNames.Injected]: injected,\n    [ConnectorNames.WalletConnect]: walletconnect,\n    [ConnectorNames.BSC]: bscConnector,\n};\n\n// getLibrary function for Web3Provider\nexport const getLibrary = (provider: any): ethers.providers.Web3Provider => {\n    const library = new ethers.providers.Web3Provider(provider);\n    library.pollingInterval = 12000;\n    return library;\n};\n\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n    const connecetedWallet = localStorage.getItem('Wallet');\n\n    // https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n    if (connecetedWallet === ConnectorNames.BSC && window.BinanceChain) {\n        const { signature } = await window.BinanceChain.bnbSign(account, message);\n        return signature;\n    }\n\n    // https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n    if (connecetedWallet === ConnectorNames.WalletConnect && provider.provider?.wc) {\n        const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));\n        const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account]);\n        return signature;\n    }\n\n    return provider.getSigner(account).signMessage(message);\n};\n","import { createSlice } from '@reduxjs/toolkit';\n\nexport const modalShowSlice = createSlice({\n    name: 'modalShow',\n    initialState: {\n        show: false,\n    },\n    reducers: {\n        changeState: (state) => {\n            state.show = state.show ? false : true;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { changeState } = modalShowSlice.actions;\n\nexport default modalShowSlice.reducer;\n","import sample from 'lodash/sample';\n\n// Error check \".env\" file for BSC_RPC_URL\nif (\n    !process.env.REACT_APP_BSC_RPC_URL_1 ||\n    !process.env.REACT_APP_BSC_RPC_URL_2 ||\n    !process.env.REACT_APP_BSC_RPC_URL_3\n) {\n    throw Error('BSC_RPC_URLs is undefined');\n}\n\n// Array of available nodes to connect to Binance Smart Chain\nexport const RPC_NODES = [\n    process.env.REACT_APP_BSC_RPC_URL_1,\n    process.env.REACT_APP_BSC_RPC_URL_2,\n    process.env.REACT_APP_BSC_RPC_URL_3,\n];\n\nconst getRPCNodeUrl = (): string | undefined => {\n    // get URL\n    const url = sample(RPC_NODES);\n\n    // return undefined if failed to extract valid URL\n    if (url === undefined) {\n        return undefined;\n    }\n\n    // return valid string URL\n    return url;\n};\n\n// Error check \".env\" file for BSC_CHAIN_ID\nif (process.env.REACT_APP_BSC_CHAIN_ID === undefined) {\n    throw new Error('BSC_CHAIN_ID is undefined');\n}\n\nconst chainID = process.env.REACT_APP_BSC_CHAIN_ID;\n\nconst getChainID = () => {\n    return parseInt(chainID, 10);\n};\n\nexport { getRPCNodeUrl, getChainID };\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const triedEagerSlice = createSlice({\n    name: 'triedEager',\n    initialState: {\n        tried: false,\n    },\n    reducers: {\n        setState: (state, action: PayloadAction<boolean>) => {\n            state.tried = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setState } = triedEagerSlice.actions;\n\nexport default triedEagerSlice.reducer;\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nexport const modalShowExpand = createSlice({\n    name: 'modalExpand',\n    initialState: {\n        expand: false,\n    },\n    reducers: {\n        setExpand: (state, action: PayloadAction<boolean>) => {\n            state.expand = action.payload;\n        },\n    },\n});\n\n// Action creators are generated for each case reducer function\nexport const { setExpand } = modalShowExpand.actions;\n\nexport default modalShowExpand.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport modalShowReducer from './modalShowSlice';\nimport triedEagerReducer from './triedEager';\nimport modalExpandReducer from './modalExpand';\n\nconst store = configureStore({\n    reducer: {\n        modalShow: modalShowReducer,\n        triedEager: triedEagerReducer,\n        modalExpand: modalExpandReducer,\n    },\n});\n\nexport default store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch;\n","import React, { ReactNode } from 'react';\nimport { Web3ReactProvider } from '@web3-react/core';\nimport { Provider } from 'react-redux';\n\nimport { getLibrary } from './utils/connectors';\nimport reduxStore from './redux/store';\n\nconst Web3Provider = ({ children }: { children: ReactNode }) => {\n    return (\n        <>\n            <Provider store={reduxStore}>\n                <Web3ReactProvider getLibrary={getLibrary}>{children}</Web3ReactProvider>\n            </Provider>\n        </>\n    );\n};\n\nexport default Web3Provider;\n","export enum ConnectorNames {\n    Injected = 'Injected',\n    BSC = 'Binance Chain Wallet',\n    WalletConnect = 'WalletConnect',\n}\n"],"sourceRoot":""}